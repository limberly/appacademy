exit
source_options.class_name.constantize.new(data[0])
source_options.class_name.constantize.new
source_options.class_name.constantize
source_options
source_options.class
exit
data
exit
data
exit
source_options
through_options
source_options.table_name
through_options.table_name
self.class.table_name
self.methods
self.table_name
self
exit
source_table
through_table
exit
through_table
source_table
exit
self.class.assoc_options[through_name].model_class.assoc_options[source_name]
self.class.assoc_options[through_name].model_class.assoc_options
self.class.assoc_options[through_name].model_class
self.class.assoc_options[through_name]
self.class.assoc_options
self.class
self.assoc_options
source_name
through_name
name
self
exit
self.assoc_options[:human]
exit
@assoc_options
exit
@assoc_options
@assoc_options[name]
exit
@assoc_options[name]
exit
name
q
options
@assoc_options.methods
@assoc_options
exit
self.assoc_options
@assoc_options
assoc_options
q
hasm.model_class.where(hasm.foreign_key => self.id)
self.id
self
hasm.model_class.where(hasm.foreign_key => 
hasm.model_class
has.model_class
self
hasm
n
q
HasManyOptions.new(name, self.class.to_s, options)
HasManyOptions(name, self.class.to_s, options)
self.class.to_s
q
self.class
self.name
self
q
belong.model_class.where(belong.primary_key => self.send(belong.foreign_key))
self.send(belong.foreign_key)
self
belong.model_class.where(belong.primary_key => 
belong.model_class
belong.foreign_key
belong
q
BelongsToOptions.new(name, options)
bt
q
name
self.options
options
q
self.model_class
name
self
@options
self.options
self
q
bt
q
BelongsToOptions.new(name, options)
bt
options
self
continue
q
attribute_values
attribute_values.shift
attribute_values
continue
col_names
q
col_names
q
col_names.pop(idx)
col_names
idx
idx_val
q
col_names
q
question_marks.join(',')
question_marks
q
attribute_values.length
col_names
question_marks
*attribute_values
attribute_values
q
name
self.class.columns
self.class
self
self.
n
s
self
n
s
q
self.new(results[0])
results
self
slef
q
self.new.finalize!
self.new
self.attributes
self
Cat.new(hash)
hash
self.columns
self.class.attributes
self.class
self.attributes
self.finalize!
self
kitty.attributes
Cat.finalize!
kitty.finalize!
kitty.columns
kitty.attributes
kitty.id
kitty = self.new
self.new(hash)
hash
self
q
self.class.columns
self.columns
self
self.new.attributes
self.new
self.new(results[0])
self
results[0]
show h
h
s
results
self
q
self.object_id
self.object
self.id
self
s
n
self
s
self.attributes
self.class
self
q
n
self
n
self
q
scope
self
q
self.attributes
@attributes
q
exit
n
q
exit
n
self.name
@attributes[column]
column
@attributes
q
@attributes
self.attributes
q
self.attributes
self
exit
q
c.class.owner_id
c.class.columns
c.columns
c.class.name
c.class.id
c.class.table_name
c.table_name
q
c.id
c.name
q
self.id
@attributes
q
@attributes
q
column.to_s+'='
self.id
n
self.id
display column
q
n
display column
column
q
@columns
q
self.to_s.tableize
self.to_s
self.to_S
self.is_a?(String)
self.tableize
self.class
