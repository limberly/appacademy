q
one_win
n
g.children.select {|child| child.draw?}
n
s
continue
n
s
q
one_win
n
not_losing
winning
n
game
n
s
q
one_win.flatten[0]
one_win.flatten
one_win[0].prev_move_pos
one_win[0]
n
s
q
one_win[0]
one_win
list
a[2]
a[1]
a[0]
a = g.children.map {|child| child.children.select {|c| c.board.winner == alternate}}
g.children.map {|child| child.children.select {|c| c.board.winner == alternate}}
g.children.select {|child| child.children.select {|c| c.board.winner == alternate}}
g.children.each {|child| child.children.select {|c| c.board.winner == alternate}}
n
s
q
one_win[0]
one_win
n
s
continue
q
one_win
n
s
q
g.children.each {|child| child.children.each {|c| puts c.board.winner}}
g.children.each do |child|
g.children.each {|child| puts child.board.winner}
g.children
n
s
q
g.children.map {|child| child.winning_node?(mark).count}
g.children.map {|child| child.winning_node?(mark)}
n
g.children.map {|child| child.winning_node?(mark)}
g.children.select {|child| child.winning_node?(mark)}
n
s
q
g.children.map {|child| child.losing_node?(mark).flatten.count}
g.children.map {|child| child.losing_node?(mark).count}
g.children.map {|child| child.losing_node?(mark)}
n
s
q
g.children.map {|child| !child.losing_node?(mark)}
g.children.map {|child| child.losing_node?(mark)}
g.children.select {|child| child.losing_node?(mark)}
g.children.select {|child| !child.losing_node?(mark)}
n
s
continue
nodes
n
s
n
winning
n
s
q
winning
n
s
q
g.children.map {|child| !child.winning_node?(alternate) && !child.winning_node?(mark)}
n
s
q
g.children.map {|child| !child.winning_node?(alternate)}
g.children.map {|child| child.winning_node?(mark)}
not_losing
n
alternate
g
g.children
winning
n
s
q
n
continue
q
g.winning_node?(:o)
game.winning_node?(:o)
game
g.children[2].losing_node?(mark)
g.children[2].winning_node?(mark)
g.children[2]
g.children[4]
g.children[3]
winning[3]
not_losing
n
g.children
winning
n
mark
game
n
s
game
q
winning
n
game
continue
n
winning
n
game
continue
q
subject.inspect
subject
subject.move(winnable_game, :x)
winnable_game.name
winnable_game.board
winnable_game.inspect
winnable_game
subject
q
@board.empty?
s
n
s
g.board
g
n
game
n
s
q
continue
q
n
m
s
mark
game
continue
q
winning
n
s
n
q
continue
n
winning[0].prev_move_pos
winning[0]
winning
n
mark
game
exit
w[0].prev_move_pos
w.prev_move_pos
w[0]
w = winning.select {|child| child.winning_node?(:x)}
winning.select {|child| child.winning_node?(:x)}
winning[0].winning_node?(:x)
winning[0].board.winner
winning[0].board
winning[0]
g
winning
n
q
@board.winner != evaluator
@board.over? && !(@board.winner != evaluator)
@board.winner
@board.wiiner
@board
@board.over?
n
@board
@board.winner != evaluator
eavluator
@board.winner
!(@board.winner != evaluator)
@board.over?
@board.over? && !(@board.winner != evaluator)
display evaluator
